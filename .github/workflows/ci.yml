#
# K2HR3 REST API
#
# Copyright 2020 Yahoo Japan Corporation.
#
# K2HR3 is K2hdkc based Resource and Roles and policy Rules, gathers
# common management information for the cloud.
# K2HR3 can dynamically manage information as "who", "what", "operate".
# These are stored as roles, resources, policies in K2hdkc, and the
# client system can dynamically read and modify these information.
#
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Wed, Nov 18 2020
# REVISION: 1.0
#

#------------------------------------------------------------------------------------
# Github Actions
#------------------------------------------------------------------------------------
name: Node.js AntPickax CI

#
# Events
#
on:
  push:
  pull_request:
  #
  # CRON event is fire on every sunday(UTC).
  #
  schedule:
    - cron: '0 15 * * 0'

#
# Jobs
#
jobs:
  build:
    # [NOTE]
    # We plan to update to ubuntu-latest (22.04) soon.
    # Right now I am forced to use 20.04 as there are no relevant packages yet.
    #
    runs-on: ubuntu-20.04

    strategy:
      #
      # do not stop jobs automatically if any of the jobs fail
      #
      fail-fast: false

      matrix:
        node-version: [18, 20]

    steps:
      #
      # Checks-out your repository under $GITHUB_WORKSPACE, so your
      # job can access it
      #
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      #
      # Set environments from secrets
      #
      # [NOTE] Secrets
      # Use Secrets of organization or repository as parameters to
      # pass to nodejs_helper.sh for building and packaging, .
      #
      # The available Secret variables are listed below:
      #    NODEJS_TYPE_VARS_FILE      : specify custom variables file
      #  * NPM_TOKEN                  : The token for publishing to npm
      #    FORCE_PUBLISHER            : nodejs major version to publish packages
      #    USE_PACKAGECLOUD_REPO      : true means using pacakgecloud.io repo, false is not using
      #    PACKAGECLOUD_OWNER         : owner name as a pat of path to packagcloud.io for downloading
      #    PACKAGECLOUD_DOWNLOAD_REPO : repo name as a pat of path to packagcloud.io for downloading
      #
      # "NPM_TOKEN" is required variable to publish the package.
      #
      - name: Set environments from secrets
        run: |
          echo "ENV_NODEJS_TYPE_VARS_FILE=${{ secrets.NODEJS_TYPE_VARS_FILE }}"           >> "${GITHUB_ENV}"
          echo "ENV_NPM_TOKEN=${{ secrets.NPM_TOKEN }}"                                   >> "${GITHUB_ENV}"
          echo "ENV_FORCE_PUBLISHER=${{ secrets.FORCE_PUBLISHER }}"                       >> "${GITHUB_ENV}"
          echo "ENV_USE_PACKAGECLOUD_REPO=${{ secrets.USE_PACKAGECLOUD_REPO }}"           >> "${GITHUB_ENV}"
          echo "ENV_PACKAGECLOUD_OWNER=${{ secrets.PACKAGECLOUD_OWNER }}"                 >> "${GITHUB_ENV}"
          echo "ENV_PACKAGECLOUD_DOWNLOAD_REPO=${{ secrets.PACKAGECLOUD_DOWNLOAD_REPO }}" >> "${GITHUB_ENV}"

      #
      # Run building and packaging helper
      #
      - name: Run building and packaging
        run: |
          /bin/sh -c "$GITHUB_WORKSPACE/.github/workflows/nodejs_helper.sh -node ${{ matrix.node-version }}"

  dockerimage:
    runs-on: ubuntu-latest
    needs: build

    #
    # build matrix for containers
    #
    strategy:
      #
      # do not stop jobs automatically if any of the jobs fail
      #
      fail-fast: false

      #
      # matrix for containers
      #
      matrix:
        #
        # Specify the "baseimage" in the following format:
        #    <base image tag>,<base dev image tag>,<OS tag name>(,<default tag flag>)
        #
        # <base image tag>:     specify the Docker image name(ex. "alpine:latest")
        # <base dev image tag>: specify the Docker image name(ex. "alpine:latest")
        # <OS tag name>:        OS tag attached to the created Docker image
        # <default tag flag>:   If you want to use the created Docker image as the default image, specify "default".
        #
        imageinfo:
          - alpine:3.18,alpine:3.18,alpine,default
          - ubuntu:22.04,ubuntu:22.04,ubuntu

    #
    # Run building and pushing helper
    #
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      #
      # Login to avoid the Docker Hub rate limit
      #
      # Github Secret cannot be read in the case of Pull Request, so that process
      # here will fail, so we need to skip it. Even if we skip this process, if we
      # are using the official Runner of Github Actions, the IP address rate will
      # not be limited and we will not get an error.
      # However, this restriction release is based on the contract between Github
      # and DockerHub, so if we skip this process, we may get an error.
      #
      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      #
      # Set environments from secrets
      #
      # [NOTE] Secrets
      # When passing parameters to docker_helper.sh in build and pusing,
      # use Secret of organization or repository.
      # 
      # By setting the correct values for the following variable names,
      # they will be passed as parameters in docker_helper.sh.
      #  * DOCKER_HUB_USERNAME        : Docker Hub username to read/push the docker images
      #  * DOCKER_HUB_ACCESSTOKEN     : Docker Hub user's Access Token
      #    DOCKER_HUB_ORG             : Docker Hub organization to push(ex. "antpickax")
      #    IMAGETYPE_VARS_FILE        : specify custom variables file
      #    FORCE_DOCKER_PUSH          : specify force push(true) or not push(false)
      #    USE_PACKAGECLOUD_REPO      : true means using pacakgecloud.io repo, false is not using
      #    PACKAGECLOUD_OWNER         : owner name as a part of path to packagcloud.io for publishing/downloading
      #    PACKAGECLOUD_DOWNLOAD_REPO : repo name as a part of path to packagcloud.io for downloading
      #
      # [REQUIRED]
      # DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESSTOKEN is required to read and push docker images!
      #
      - name: Set docker image build environments from secrets
        run: |
          echo "ENV_DOCKER_IMAGE_INFO=${{ matrix.imageinfo }}"                            >> "${GITHUB_ENV}"
          echo "ENV_IMAGE_NAMES=k2hr3-api"                                                >> "${GITHUB_ENV}"
          echo "ENV_IMAGEVAR_FILE=${{ secrets.IMAGETYPE_VARS_FILE }}"                     >> "${GITHUB_ENV}"
          echo "ENV_DOCKER_HUB_ORG=${{ secrets.DOCKER_HUB_ORG }}"                         >> "${GITHUB_ENV}"
          echo "ENV_FORCE_PUSH=${{ secrets.FORCE_DOCKER_PUSH }}"                          >> "${GITHUB_ENV}"
          echo "ENV_USE_PACKAGECLOUD_REPO=${{ secrets.USE_PACKAGECLOUD_REPO }}"           >> "${GITHUB_ENV}"
          echo "ENV_PACKAGECLOUD_OWNER=${{ secrets.PACKAGECLOUD_OWNER }}"                 >> "${GITHUB_ENV}"
          echo "ENV_PACKAGECLOUD_DOWNLOAD_REPO=${{ secrets.PACKAGECLOUD_DOWNLOAD_REPO }}" >> "${GITHUB_ENV}"

      #
      # Run building and pushing
      #
      - name: Build and Push image to Docker Hub
        run: |
          ${GITHUB_WORKSPACE}/.github/workflows/docker_helper.sh

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: expandtab sw=4 ts=4 fdm=marker
# vim<600: expandtab sw=4 ts=4
#
