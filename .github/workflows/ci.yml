#
# Utility helper tools for Github Actions by AntPickax
#
# Copyright 2020 Yahoo Japan Corporation.
#
# AntPickax provides utility tools for supporting nodejs.
#
# These tools retrieve the necessary information from the
# repository and appropriately set the setting values of
# configure, Makefile, spec,etc file and so on.
# These tools were recreated to reduce the number of fixes and
# reduce the workload of developers when there is a change in
# the project configuration.
# 
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Wed, Nov 18 2020
# REVISION: 1.0
#

#------------------------------------------------------------------------------------
# Github Actions
#------------------------------------------------------------------------------------
name: Node.js AntPickax CI

#
# Events
#
on:
  push:
  pull_request:
  #
  # CRON event is fire on every sunday(UTC).
  #
  schedule:
    - cron: '0 15 * * 0'

#
# Jobs
#
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      #
      # do not stop jobs automatically if any of the jobs fail
      #
      fail-fast: false

      matrix:
        node-version: [14, 16, 18]

    steps:
      #
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      #
      # Run building and packaging helper
      #
      # [NOTE] Secrets and Environments
      # When passing parameters to build_helper.sh in build and packaging,
      # use Secret of organization or repository.
      # 
      # By setting the correct values for the following variable names,
      # they will be passed as parameters in build_helper.sh.
      #    NODEJS_TYPE_VARS_FILE      : specify custom variables file
      #  * NPM_TOKEN                  : The token for publishing to npm
      #    FORCE_PUBLISHER            : nodejs major version to publish packages
      #    USE_PACKAGECLOUD_REPO      : true means using pacakgecloud.io repo, false is not using
      #    PACKAGECLOUD_OWNER         : owner name as a pat of path to packagcloud.io for downloading
      #    PACKAGECLOUD_DOWNLOAD_REPO : repo name as a pat of path to packagcloud.io for downloading
      #
      # [REQUIRED]
      # NPM_TOKEN is required to publish(upload) the package!!!
      # For yahoojapan organization repositories, always set NPM_TOKEN!!!
      #
      - name: Run building and packaging
        env:
          TMP_CI_NODEJS_TYPE_VARS_FILE:      ${{ secrets.NODEJS_TYPE_VARS_FILE }}
          TMP_CI_NPM_TOKEN:                  ${{ secrets.NPM_TOKEN }}
          TMP_CI_FORCE_PUBLISHER:            ${{ secrets.FORCE_PUBLISHER }}
          TMP_CI_USE_PACKAGECLOUD_REPO:      ${{ secrets.USE_PACKAGECLOUD_REPO }}
          TMP_CI_PACKAGECLOUD_OWNER:         ${{ secrets.PACKAGECLOUD_OWNER }}
          TMP_CI_PACKAGECLOUD_DOWNLOAD_REPO: ${{ secrets.PACKAGECLOUD_DOWNLOAD_REPO }}

        run: |
          if [ "X${TMP_CI_NODEJS_TYPE_VARS_FILE}" != "X" ]; then      OPT_CI_NODEJS_TYPE_VARS_FILE="-f ${TMP_CI_NODEJS_TYPE_VARS_FILE}";                  fi
          if [ "X${TMP_CI_NPM_TOKEN}" != "X" ]; then                  OPT_CI_NPM_TOKEN="-token ${TMP_CI_NPM_TOKEN}";                                      fi
          if [ "X${TMP_CI_FORCE_PUBLISHER}" != "X" ]; then            OPT_CI_FORCE_PUBLISHER="-fp ${TMP_CI_FORCE_PUBLISHER}";                             fi
          if [ "X${TMP_CI_USE_PACKAGECLOUD_REPO}" = "Xtrue" ]; then   OPT_CI_USE_PACKAGECLOUD_REPO="-usepc";                                              elif [ "X${TMP_CI_USE_PACKAGECLOUD_REPO}" = "Xfalse" ]; then OPT_CI_USE_PACKAGECLOUD_REPO="-notpc"; fi
          if [ "X${TMP_CI_PACKAGECLOUD_OWNER}" != "X" ]; then         OPT_CI_PACKAGECLOUD_OWNER="-pcowner ${TMP_CI_PACKAGECLOUD_OWNER}";                  fi
          if [ "X${TMP_CI_PACKAGECLOUD_DOWNLOAD_REPO}" != "X" ]; then OPT_CI_PACKAGECLOUD_DOWNLOAD_REPO="-pcdlrepo ${TMP_CI_PACKAGECLOUD_DOWNLOAD_REPO}"; fi
          /bin/sh -c "$GITHUB_WORKSPACE/.github/workflows/nodejs_helper.sh -node ${{ matrix.node-version }} $OPT_CI_NODEJS_TYPE_VARS_FILE $OPT_CI_NPM_TOKEN $OPT_CI_FORCE_PUBLISHER $OPT_CI_USE_PACKAGECLOUD_REPO $OPT_CI_PACKAGECLOUD_OWNER $OPT_CI_PACKAGECLOUD_DOWNLOAD_REPO"

  dockerimage:
    runs-on: ubuntu-latest

    #
    # build matrix for containers
    #
    strategy:
      #
      # do not stop jobs automatically if any of the jobs fail
      #
      fail-fast: false

      #
      # matrix for containers
      #
      matrix:
        #
        # Specify the "baseimage" in the following format:
        #    <base image tag>,<base dev image tag>,<OS tag name>(,<default tag flag>)
        #
        # <base image tag>:     specify the Docker image name(ex. "k2hdkc:latest")
        # <base dev image tag>: specify the Docker image name(ex. "k2hdkc-dev:latest")
        # <OS tag name>:        OS tag attached to the created Docker image
        # <default tag flag>:   If you want to use the created Docker image as the default image, specify "default".
        #
        imageinfo:
          - antpickax/k2hdkc:latest,antpickax/k2hdkc-dev:latest,alpine,default
          - antpickax/k2hdkc:latest-ubuntu,antpickax/k2hdkc-dev:latest-ubuntu,ubuntu

    #
    # Run building and pushing helper
    #
    # [NOTE] Secrets and Environments
    # When passing parameters to docker_helper.sh in build and pusing,
    # use Secret of organization or repository.
    # 
    # By setting the correct values for the following variable names,
    # they will be passed as parameters in docker_helper.sh.
    #  * DOCKER_HUB_USERNAME        : Docker Hub username to read/push the docker images
    #  * DOCKER_HUB_ACCESSTOKEN     : Docker Hub user's Access Token
    #    DOCKER_HUB_ORG             : Docker Hub organization to push(ex. "antpickax")
    #    IMAGETYPE_VARS_FILE        : specify custom variables file
    #    FORCE_DOCKER_PUSH          : specify force push(true) or not push(false)
    #
    # [REQUIRED]
    # DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESSTOKEN is required to read and push docker images!
    #
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      #
      # Login to avoid the Docker Hub rate limit
      #
      # Github Secret cannot be read in the case of Pull Request, so that process
      # here will fail, so we need to skip it. Even if we skip this process, if we
      # are using the official Runner of Github Actions, the IP address rate will
      # not be limited and we will not get an error.
      # However, this restriction release is based on the contract between Github
      # and DockerHub, so if we skip this process, we may get an error.
      #
      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push to Docker Hub
        env:
          TMP_CI_DOCKER_IMAGE_INFO:     ${{ matrix.imageinfo }}
          TMP_CI_DOCKER_IMAGE_NAMES:    "k2hr3-api"
          TMP_CI_IMAGETYPE_VARS_FILE:   ${{ secrets.IMAGETYPE_VARS_FILE }}
          TMP_CI_DOCKER_HUB_ORG:        ${{ secrets.DOCKER_HUB_ORG }}
          TMP_CI_FORCE_DOCKER_PUSH:     ${{ secrets.FORCE_DOCKER_PUSH }}

        run: |
          OPT_CI_DOCKER_IMAGE_INFO="-i ${TMP_CI_DOCKER_IMAGE_INFO}";
          OPT_CI_DOCKER_IMAGE_NAMES="-n ${TMP_CI_DOCKER_IMAGE_NAMES}"
          if [ "X${TMP_CI_IMAGETYPE_VARS_FILE}" != "X" ]; then  OPT_CI_IMAGETYPE_VARS_FILE="-f ${TMP_CI_IMAGETYPE_VARS_FILE}";  fi
          if [ "X${TMP_CI_DOCKER_HUB_ORG}" != "X" ]; then       OPT_CI_DOCKER_HUB_ORG="-o ${TMP_CI_DOCKER_HUB_ORG}";            fi
          if [ "X${TMP_CI_FORCE_DOCKER_PUSH}" = "Xtrue" ]; then OPT_CI_FORCE_DOCKER_PUSH="-p";                                  elif [ "X${TMP_CI_FORCE_DOCKER_PUSH}" = "Xfalse" ]; then OPT_CI_FORCE_DOCKER_PUSH="-np"; fi
          /bin/sh -c "${GITHUB_WORKSPACE}/.github/workflows/docker_helper.sh ${OPT_CI_DOCKER_IMAGE_INFO} ${OPT_CI_DOCKER_HUB_ORG} ${OPT_CI_DOCKER_IMAGE_NAMES} ${OPT_CI_FORCE_DOCKER_PUSH}"

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: expandtab sw=4 ts=4 fdm=marker
# vim<600: expandtab sw=4 ts=4
#
